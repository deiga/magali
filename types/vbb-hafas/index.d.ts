/** Declaration file generated by dts-gen */
declare module "vbb-hafas" {
  export function departures(station: any, opt?: any): any;

  export function journeyLeg(ref: any, lineName: any, opt?: any): any;

  export function journeys(from: any, to: any, opt?: any): any;

  export function location(station: any): any;

  export function locations(query: string, opt?: any): any;

  export function nearby(location: any, opt?: any): any;

  export function radar(north: any, west: any, south: any, east: any, opt?:
    any): any;

  export namespace profile {
    const addChecksum: boolean;

    const addMicMac: boolean;

    const endpoint: string;

    const filters: {
      accessibility: {
        complete: {
          meta: string;
          mode: string;
          type: string;
        };
        none: {
          meta: string;
          mode: string;
          type: string;
        };
        partial: {
          meta: string;
          mode: string;
          type: string;
        };
      };
      bike: {
        mode: string;
        type: string;
      };
    };

    const journeyLeg: boolean;

    const journeysNumF: boolean;

    const locale: string;

    const products: {
      bitmask: number;
      category: number;
      mode: string;
      name: string;
      product: string;
      short: string;
    }[];

    const radar: boolean;

    const timezone: string;

    function formatAddress(a: any): any;

    function formatCoord(x: any): void;

    function formatDate(profile: any, when: any): any;

    function formatLocation(profile: any, l: any): any;

    function formatLocationFilter(stations: any, addresses: any, poi: any):
    any;

    function formatPoi(p: any): any;

    function formatProducts(products: any): any;

    function formatRectangle(profile: any, north: any, west: any, south: any,
      east: any): any;

    function formatStation(id: any): any;

    function formatTime(profile: any, when: any): any;

    function parseDateTime(profile: any, date: any, time: any): any;

    function parseDeparture(profile: any, stations: any, lines: any, remarks:
      any): any;

    function parseJourney(profile: any, stations: any, lines: any, remarks:
      any, polylines: any): any;

    function parseJourneyLeg(profile: any, stations: any, lines: any, remarks:
      any, polylines: any): any;

    function parseLine(profile: any, operators: any): any;

    function parseLocation(profile: any, l: any, lines: any): any;

    function parseMovement(profile: any, locations: any, lines: any, remarks:
      any, polylines: any): any;

    function parseNearby(profile: any, n: any, lines: any): any;

    function parseOperator(profile: any, a: any): any;

    function parseProducts(bitmask: any): any;

    function parseRemark(profile: any, r: any): any;

    function parseStationName(n: any): any;

    function parseStopover(profile: any, stations: any, lines: any, remarks:
      any, date: any): any;

    function transformJourneysQuery(x: any): void;

    function transformReq(x: any): void;

    function transformReqBody(body: any): any;

    namespace salt {
      const BYTES_PER_ELEMENT: number;

      const byteLength: number;

      const byteOffset: number;

      const length: number;

      const offset: number;

      function asciiSlice(): any;

      function asciiWrite(): any;

      function base64Slice(): any;

      function base64Write(): any;

      function compare(target: any, start: any, end: any, thisStart: any,
        thisEnd: any, ...args: any[]): any;

      function copy(target: any, targetStart: any, sourceStart: any,
        sourceEnd: any): any;

      function copyWithin(p0: any, p1: any): any;

      function entries(): any;

      function equals(otherBuffer: any): any;

      function every(p0: any): any;

      function fill(val: any, start: any, end: any, encoding: any): any;

      function filter(p0: any): any;

      function find(p0: any): any;

      function findIndex(p0: any): any;

      function forEach(p0: any): any;

      function hexSlice(): any;

      function hexWrite(): any;

      function includes(val: any, byteOffset: any, encoding: any): any;

      function indexOf(val: any, byteOffset: any, encoding: any): any;

      function inspect(): any;

      function join(p0: any): any;

      function keys(): any;

      function lastIndexOf(val: any, byteOffset: any, encoding: any): any;

      function latin1Slice(): any;

      function latin1Write(): any;

      function map(p0: any): any;

      function readDoubleBE(offset: any): any;

      function readDoubleLE(offset: any): any;

      function readFloatBE(offset: any): any;

      function readFloatLE(offset: any): any;

      function readInt16BE(offset: any): any;

      function readInt16LE(offset: any): any;

      function readInt32BE(offset: any): any;

      function readInt32LE(offset: any): any;

      function readInt8(offset: any): any;

      function readIntBE(offset: any, byteLength: any): any;

      function readIntLE(offset: any, byteLength: any): any;

      function readUInt16BE(offset: any): any;

      function readUInt16LE(offset: any): any;

      function readUInt32BE(offset: any): any;

      function readUInt32LE(offset: any): any;

      function readUInt8(offset: any): any;

      function readUIntBE(offset: any, byteLength: any): any;

      function readUIntLE(offset: any, byteLength: any): any;

      function reduce(p0: any): any;

      function reduceRight(p0: any): any;

      function reverse(): any;

      function set(p0: any): any;

      function slice(start: any, end: any): any;

      function some(p0: any): any;

      function sort(p0: any): any;

      function subarray(p0: any, p1: any): any;

      function swap16(): any;

      function swap32(): any;

      function swap64(): any;

      function toJSON(): any;

      function toLocaleString(encoding: any, start: any, end: any, ...args:
        any[]): any;

      function toString(encoding: any, start: any, end: any, ...args: any[]):
      any;

      function ucs2Slice(): any;

      function ucs2Write(): any;

      function utf8Slice(): any;

      function utf8Write(): any;

      function values(): any;

      function write(string: any, offset: any, length: any, encoding: any):
      any;

      function writeDoubleBE(val: any, offset: any): any;

      function writeDoubleLE(val: any, offset: any): any;

      function writeFloatBE(val: any, offset: any): any;

      function writeFloatLE(val: any, offset: any): any;

      function writeInt16BE(value: any, offset: any): any;

      function writeInt16LE(value: any, offset: any): any;

      function writeInt32BE(value: any, offset: any): any;

      function writeInt32LE(value: any, offset: any): any;

      function writeInt8(value: any, offset: any): any;

      function writeIntBE(value: any, offset: any, byteLength: any): any;

      function writeIntLE(value: any, offset: any, byteLength: any): any;

      function writeUInt16BE(value: any, offset: any): any;

      function writeUInt16LE(value: any, offset: any): any;

      function writeUInt32BE(value: any, offset: any): any;

      function writeUInt32LE(value: any, offset: any): any;

      function writeUInt8(value: any, offset: any): any;

      function writeUIntBE(value: any, offset: any, byteLength: any): any;

      function writeUIntLE(value: any, offset: any, byteLength: any): any;

      namespace asciiSlice {
        const prototype: {};

      }

      namespace asciiWrite {
        const prototype: {};

      }

      namespace base64Slice {
        const prototype: {};

      }

      namespace base64Write {
        const prototype: {};

      }

      namespace buffer {
        const byteLength: number;

        function slice(p0: any, p1: any): any;

      }

      namespace compare {
        const prototype: {};

      }

      namespace copy {
        const prototype: {};

      }

      namespace equals {
        const prototype: {};

      }

      namespace fill {
        const prototype: {};

      }

      namespace hexSlice {
        const prototype: {};

      }

      namespace hexWrite {
        const prototype: {};

      }

      namespace includes {
        const prototype: {};

      }

      namespace indexOf {
        const prototype: {};

      }

      namespace inspect {
        const prototype: {};

      }

      namespace lastIndexOf {
        const prototype: {};

      }

      namespace latin1Slice {
        const prototype: {};

      }

      namespace latin1Write {
        const prototype: {};

      }

      namespace parent {
        const byteLength: number;

        function slice(p0: any, p1: any): any;

      }

      namespace readDoubleBE {
        const prototype: {};

      }

      namespace readDoubleLE {
        const prototype: {};

      }

      namespace readFloatBE {
        const prototype: {};

      }

      namespace readFloatLE {
        const prototype: {};

      }

      namespace readInt16BE {
        const prototype: {};

      }

      namespace readInt16LE {
        const prototype: {};

      }

      namespace readInt32BE {
        const prototype: {};

      }

      namespace readInt32LE {
        const prototype: {};

      }

      namespace readInt8 {
        const prototype: {};

      }

      namespace readIntBE {
        const prototype: {};

      }

      namespace readIntLE {
        const prototype: {};

      }

      namespace readUInt16BE {
        const prototype: {};

      }

      namespace readUInt16LE {
        const prototype: {};

      }

      namespace readUInt32BE {
        const prototype: {};

      }

      namespace readUInt32LE {
        const prototype: {};

      }

      namespace readUInt8 {
        const prototype: {};

      }

      namespace readUIntBE {
        const prototype: {};

      }

      namespace readUIntLE {
        const prototype: {};

      }

      namespace slice {
        const prototype: {};

      }

      namespace swap16 {
        const prototype: {};

      }

      namespace swap32 {
        const prototype: {};

      }

      namespace swap64 {
        const prototype: {};

      }

      namespace toJSON {
        const prototype: {};

      }

      namespace toLocaleString {
        const prototype: {};

      }

      namespace toString {
        const prototype: {};

      }

      namespace ucs2Slice {
        const prototype: {};

      }

      namespace ucs2Write {
        const prototype: {};

      }

      namespace utf8Slice {
        const prototype: {};

      }

      namespace utf8Write {
        const prototype: {};

      }

      namespace write {
        const prototype: {};

      }

      namespace writeDoubleBE {
        const prototype: {};

      }

      namespace writeDoubleLE {
        const prototype: {};

      }

      namespace writeFloatBE {
        const prototype: {};

      }

      namespace writeFloatLE {
        const prototype: {};

      }

      namespace writeInt16BE {
        const prototype: {};

      }

      namespace writeInt16LE {
        const prototype: {};

      }

      namespace writeInt32BE {
        const prototype: {};

      }

      namespace writeInt32LE {
        const prototype: {};

      }

      namespace writeInt8 {
        const prototype: {};

      }

      namespace writeIntBE {
        const prototype: {};

      }

      namespace writeIntLE {
        const prototype: {};

      }

      namespace writeUInt16BE {
        const prototype: {};

      }

      namespace writeUInt16LE {
        const prototype: {};

      }

      namespace writeUInt32BE {
        const prototype: {};

      }

      namespace writeUInt32LE {
        const prototype: {};

      }

      namespace writeUInt8 {
        const prototype: {};

      }

      namespace writeUIntBE {
        const prototype: {};

      }

      namespace writeUIntLE {
        const prototype: {};

      }

    }

  }

}
